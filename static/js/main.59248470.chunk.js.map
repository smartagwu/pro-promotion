{"version":3,"sources":["App.js","reportWebVitals.js","redux/middleware.js","redux/enhancer.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","applyMiddleware","store","next","action","console","group","type","info","result","log","getState","groupEnd","thunkMiddleware","composeWithDevTools","middleware","createStore","reducer","initialState","enhancer","state","number","start","performance","now","newState","end","diff","Math","round","combineReducers","rootReducer","undefined","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAEe,SAASA,IACtB,OAAQ,qBAAKC,UAAU,MAAf,+BCHV,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,qBCKCQ,6BATA,SAACC,GAAD,OAAW,SAACC,GAAD,OAAU,SAACC,GACnCC,QAAQC,MAAMF,EAAOG,MACrBF,QAAQG,KAAK,cAAeJ,GAC5B,IAAIK,EAASN,EAAKC,GAGlB,OAFAC,QAAQK,IAAI,aAAcR,EAAMS,YAChCN,QAAQO,WACDH,MAG8BI,K,OCOxBC,gCAAoBC,GAfJ,SAACC,GAAD,OAAiB,SAACC,EAASC,EAAcC,GAYtE,OAAOH,GAXkB,SAACI,EAAOhB,GAC/B,IAHWiB,EAGLC,EAAQC,YAAYC,MACpBC,EAAWR,EAAQG,EAAOhB,GAC1BsB,EAAMH,YAAYC,MAClBG,GANKN,EAMQK,EAAMJ,EANHM,KAAKC,MAAe,IAATR,GAAgB,KAUjD,OAFAhB,QAAQK,IAAI,wBAAyBiB,GAE9BF,IAG4BP,EAAcC,OCdtCW,4BAAgB,ICQhB5B,MANDc,sBAAYe,OAAaC,EAAWb,GCIlDc,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUjC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJkC,SAASC,eAAe,SAM1B7C,M","file":"static/js/main.59248470.chunk.js","sourcesContent":["import './App.scss';\n\nexport default function App() {\n  return  <div className=\"App\">Pro Promotion App</div>\n}\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import thunkMiddleware from \"redux-thunk\";\nimport { applyMiddleware } from \"redux\";\n\nconst logger = (store) => (next) => (action) => {\n  console.group(action.type);\n  console.info(\"dispatching\", action);\n  let result = next(action);\n  console.log(\"next state\", store.getState());\n  console.groupEnd();\n  return result;\n};\n\nexport default applyMiddleware(logger, thunkMiddleware);","import middleware from \"./middleware\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst round = (number) => Math.round(number * 100) / 100;\nconst monitorReducerEnhancer = (createStore) => (reducer, initialState, enhancer) => {\n  const monitoredReducer = (state, action) => {\n    const start = performance.now();\n    const newState = reducer(state, action);\n    const end = performance.now();\n    const diff = round(end - start);\n\n    console.log(\"reducer process time:\", diff);\n\n    return newState;\n  };\n\n  return createStore(monitoredReducer, initialState, enhancer);\n};\n\nexport default composeWithDevTools(middleware, monitorReducerEnhancer);","import { combineReducers } from \"redux\";\n\nexport default combineReducers({});","import { createStore } from \"redux\";\nimport enhancer from \"./enhancer\"\nimport rootReducer from \"./reducers\"\n\nconst store = createStore(rootReducer, undefined, enhancer);\n\nif (process.env.NODE_ENV !== \"production\" && module.hot) {\n  module.hot.accept(\"./reducers\", () => store.replaceReducer(rootReducer));\n}\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}